import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft
from scipy.io import wavfile
import os

# ========= Load and preprocess real signal from .wav =========
wav_path = "./primary/sub-1001/perf-1001-A/01-A-1.wav"
rate, signal = wavfile.read(wav_path)

# Convert to mono if stereo
if signal.ndim > 1:
    signal = signal.mean(axis=1)

# Normalize
signal = signal.astype(np.float32)
signal = (signal - np.mean(signal)) / np.std(signal)

# ========= Load synthetic signal generated by VAE =========
synthetic_signals = np.load("vae_signals/synthetic_vae_signals.npy")  # shape: [N, L]
synthetic = synthetic_signals[0]  # take the first one

# ========= Trim both to same length =========
min_len = min(len(signal), len(synthetic))
real = signal[:min_len]
synthetic = synthetic[:min_len]

# ========= Compute FFTs =========
real_fft = np.abs(fft(real))[:min_len // 2]
synthetic_fft = np.abs(fft(synthetic))[:min_len // 2]

# ========= Compute comparison stats =========
stats = {
    "mean_real": np.mean(real),
    "mean_synthetic": np.mean(synthetic),
    "std_real": np.std(real),
    "std_synthetic": np.std(synthetic),
    "mse": np.mean((real - synthetic) ** 2),
    "max_diff": np.max(np.abs(real - synthetic))
}

# ========= Save stats =========
os.makedirs("comparison", exist_ok=True)
with open("comparison/statistics.txt", "w") as f:
    for k, v in stats.items():
        f.write(f"{k}: {v:.6f}\n")

# ========= Plot waveforms =========
plt.figure(figsize=(12, 4))
plt.plot(real, label="Real Signal", alpha=0.8)
plt.plot(synthetic, label="Synthetic Signal", alpha=0.8)
plt.title("Signal Comparison")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig("comparison/waveform_comparison.png")
plt.close()

# ========= Plot FFTs =========
plt.figure(figsize=(10, 3))
plt.plot(real_fft, label="Real FFT")
plt.plot(synthetic_fft, label="Synthetic FFT")
plt.title("Frequency Spectrum Comparison")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig("comparison/fft_comparison.png")
plt.close()
